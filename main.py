import sys
import json
import asyncio
import aiohttp
import aiofiles
import random
import string
import os
from typing import List, Optional
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                           QHBoxLayout, QPushButton, QLabel, QTextEdit, 
                           QListWidget, QListWidgetItem, QSplitter, QToolTip,
                           QMessageBox, QDialog)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal, QObject, QPoint, QRect, QMetaObject, QUrl, QSize
from PyQt6.QtGui import QClipboard, QIcon
from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtWebEngineCore import QWebEngineProfile, QWebEngineSettings
from pathlib import Path
from win10toast import ToastNotifier
from winotify import Notification, audio
import threading
from datetime import datetime
import shutil
import requests
import re
import webbrowser

API = 'https://www.1secmail.com/api/v1/'
domain_list = [
    "1secmail.com", "1secmail.org", "1secmail.net",
    "wwjmp.com", "esiix.com", "xojxe.com", "yoggm.com"
]

# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
BASE_FOLDER = Path.home() / "Documents" / "TempMail"
SETTINGS_FOLDER = BASE_FOLDER / "TempMailSettings"
MAIL_FOLDER = BASE_FOLDER / "TempMailMessages"

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º
def resource_path(relative_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É"""
    try:
        # PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Ö—Ä–∞–Ω–∏—Ç –ø—É—Ç—å –≤ _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    
    return os.path.join(base_path, relative_path)

class AsyncHelper(QObject):
    finished = pyqtSignal(object)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.loop = asyncio.new_event_loop()
        self.thread = threading.Thread(target=self._run_event_loop, daemon=True)
        self.thread.start()
    
    def _run_event_loop(self):
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()
    
    def run_async(self, coro):
        future = asyncio.run_coroutine_threadsafe(coro, self.loop)
        return future

class TempMailApp(QMainWindow):
    def __init__(self):
        super().__init__()
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ–±-–¥–≤–∏–∂–∫–∞
        self.setup_web_engine()
        
        # –ö—ç—à –¥–ª—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_cache = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º welcome_html –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        self.welcome_html = '''
        <html>
        <head>
            <style>
                body {
                    font-family: 'Segoe UI', Arial, sans-serif;
                    background-color: #1e1e1e;
                    color: #ffffff;
                    margin: 0;
                    padding: 40px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    min-height: calc(100vh - 80px);
                }
                .welcome-container {
                    text-align: center;
                    max-width: 800px;
                }
                .icon-container {
                    margin-bottom: 35px;
                }
                .icon-container img {
                    width: 90px;
                    height: 90px;
                    filter: drop-shadow(0 0 15px rgba(0, 120, 215, 0.3));
                }
                h2 {
                    color: #ffffff;
                    font-size: 26px;
                    font-weight: 400;
                    margin: 0 0 15px 0;
                }
                .subtitle {
                    color: #a0a0a0;
                    font-size: 15px;
                    margin-bottom: 40px;
                    line-height: 1.5;
                }
                .features-grid {
                    display: grid;
                    grid-template-columns: repeat(3, 1fr);
                    gap: 20px;
                    margin-bottom: 30px;
                }
                .feature {
                    background-color: #252526;
                    padding: 25px 20px;
                    border-radius: 8px;
                    text-align: left;
                    display: flex;
                    align-items: flex-start;
                    border: 1px solid #333333;
                    transition: transform 0.2s, box-shadow 0.2s;
                }
                .feature:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                }
                .feature img {
                    width: 32px;
                    height: 32px;
                    margin-right: 15px;
                    filter: drop-shadow(0 0 5px rgba(0, 120, 215, 0.2));
                }
                .feature-text {
                    flex: 1;
                }
                .feature-title {
                    color: #ffffff;
                    font-size: 15px;
                    margin-bottom: 6px;
                    font-weight: 500;
                }
                .feature-desc {
                    color: #a0a0a0;
                    font-size: 13px;
                    line-height: 1.4;
                }
                .guide {
                    background-color: #252526;
                    border: 1px solid #333333;
                    border-radius: 8px;
                    padding: 25px;
                    margin-top: 30px;
                    text-align: center;
                }
                .guide h3 {
                    color: #ffffff;
                    font-size: 16px;
                    margin: 0 0 20px 0;
                    text-align: center;
                }
                .guide ul {
                    margin: 0;
                    padding-left: 0;
                    color: #a0a0a0;
                    list-style-position: inside;
                    display: inline-block;
                    text-align: left;
                }
                .guide li {
                    margin-bottom: 10px;
                    font-size: 14px;
                    line-height: 1.5;
                }
                .guide li strong {
                    color: #0078d4;
                }
            </style>
        </head>
        <body>
            <div class="welcome-container">
                <div class="icon-container">
                    <img src="https://cdn-icons-png.flaticon.com/512/9293/9293648.png" alt="Email">
                </div>
                <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í—Ä–µ–º–µ–Ω–Ω—É—é –ü–æ—á—Ç—É</h2>
                <div class="subtitle">
                    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
                </div>
                <div class="features-grid">
                    <div class="feature">
                        <img src="https://cdn-icons-png.flaticon.com/512/6195/6195699.png" alt="Security">
                        <div class="feature-text">
                            <div class="feature-title">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</div>
                            <div class="feature-desc">–ó–∞—â–∏—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—á—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫</div>
                        </div>
                    </div>
                    <div class="feature">
                        <img src="https://cdn-icons-png.flaticon.com/512/9473/9473778.png" alt="Speed">
                        <div class="feature-text">
                            <div class="feature-title">–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</div>
                            <div class="feature-desc">–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å–µ–º</div>
                        </div>
                    </div>
                    <div class="feature">
                        <img src="https://cdn-icons-png.flaticon.com/512/8832/8832119.png" alt="Auto">
                        <div class="feature-text">
                            <div class="feature-title">–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</div>
                            <div class="feature-desc">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –∫–∞–∂–¥—ã–µ 7 —Å–µ–∫—É–Ω–¥</div>
                        </div>
                    </div>
                </div>
                <div class="guide">
                    <h3>üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</h3>
                    <ul>
                        <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <strong>–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å</strong> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞</li>
                        <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <strong>üìã</strong> —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞</li>
                        <li>–ö–Ω–æ–ø–∫–∞ <strong>–û–±–Ω–æ–≤–∏—Ç—å</strong> –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º</li>
                        <li>–í—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–ª–µ–≤–∞</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∏—Å—å–º–æ –≤ —Å–ø–∏—Å–∫–µ, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</li>
                        <li>–í—Å–µ –ø–∏—Å—å–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ</li>
                        <li>–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –ø–æ—è–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
                    </ul>
                </div>
            </div>
        </body>
        </html>
        '''
        
        self.setWindowTitle("–í—Ä–µ–º–µ–Ω–Ω–∞—è –ü–æ—á—Ç–∞")
        self.setGeometry(100, 100, 1200, 800)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.setMinimumSize(1000, 600)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∫–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞—é—â–∏–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
        self.setWindowFlags(
            Qt.WindowType.Window |  # –û–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ
            Qt.WindowType.WindowMinimizeButtonHint |  # –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
            Qt.WindowType.WindowMaximizeButtonHint |  # –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
            Qt.WindowType.WindowCloseButtonHint  # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        icon = QIcon(resource_path("appicon.png"))
        self.setWindowIcon(icon)
        QApplication.setWindowIcon(icon)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.current_mail = ""
        self.session = None
        self.async_helper = AsyncHelper(self)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
        self.base_folder = BASE_FOLDER
        self.settings_path = SETTINGS_FOLDER
        self.settings_file = self.settings_path / "settings.json"
        self.mail_folder = MAIL_FOLDER
        
        self.last_message_count = 0
        self.is_windows = sys.platform.startswith('win')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Windows
        self.is_windows = sys.platform.startswith('win')
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
        self.icon_path = resource_path("appicon.png")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º .png
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
        self.create_folder_structure()
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
        self.init_ui()
        self.async_helper.run_async(self.init_session())
        self.load_settings()
        self.check_mail()
        
        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        self.check_timer = QTimer()
        self.check_timer.timeout.connect(self.auto_check_mail)
        self.check_timer.start(7000)  # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 7 —Å–µ–∫—É–Ω–¥
        self.last_message_count = 0  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º

    def create_folder_structure(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
            self.base_folder.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            self.settings_path.mkdir(parents=True, exist_ok=True)
            self.mail_folder.mkdir(parents=True, exist_ok=True)
            
            print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫: {e}")

    def init_ui(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–∏—Å–µ–º –≤ —Å–ø–∏—Å–∫–µ
        self.setStyleSheet("""
            QMainWindow, QWidget {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
                font-size: 13px;
            }
            QPushButton {
                background-color: #2d2d2d;
                border: 1px solid #3d3d3d;
                color: #ffffff;
                padding: 8px 15px;
                border-radius: 4px;
                font-size: 13px;
                min-width: 80px;
            }
            QPushButton:hover {
                background-color: #3d3d3d;
                border: 1px solid #4d4d4d;
            }
            QPushButton:pressed {
                background-color: #4d4d4d;
            }
            QListWidget {
                background-color: #252526;
                border: none;
                border-radius: 4px;
                color: #ffffff;
                font-size: 13px;
                padding: 5px;
                outline: none;
            }
            QListWidget::item {
                padding: 10px;
                margin: 3px 5px;
                border-radius: 6px;
                background-color: #2a2a2a;
                border-left: 3px solid transparent;
            }
            QListWidget::item:selected {
                background-color: #323232;
                color: #ffffff;
                border-left: 3px solid #0078d4;
                padding-left: 7px;
            }
            QListWidget::item:hover:!selected {
                background-color: #2d2d2d;
                border-left: 3px solid #404040;
            }
            QListWidget::item:selected:hover {
                background-color: #383838;
                border-left: 3px solid #0078d4;
            }
            QListWidget:focus {
                outline: none;
            }
            QSplitter::handle {
                background-color: #2d2d2d;
                margin: 1px;
            }
            QToolTip {
                background-color: #2d2d2d;
                color: #ffffff;
                border: 1px solid #3d3d3d;
                border-radius: 4px;
                padding: 5px;
            }
        """)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_widget = QWidget()
        top_widget.setFixedHeight(50)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É
        top_widget.setStyleSheet("""
            QWidget {
                background-color: #252526;
                border-radius: 6px;
            }
        """)
        
        top_panel = QHBoxLayout(top_widget)
        top_panel.setContentsMargins(10, 0, 10, 0)  # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        top_panel.setSpacing(10)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–¥—Ä–µ—Å–∞
        address_container = QWidget()
        address_layout = QHBoxLayout(address_container)
        address_layout.setContentsMargins(0, 0, 0, 0)
        address_layout.setSpacing(8)
        
        self.mail_label = QLabel("–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:")
        self.mail_label.setStyleSheet("""
            QLabel {
                color: #a0a0a0;
                font-size: 12px;
            }
        """)
        
        self.mail_address = QLabel("")
        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–¥–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞ init_ui)
        button_height = "32px"  # –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        self.mail_address.setStyleSheet("""
            QLabel {
                color: #ffffff;
                font-size: 13px;
                font-family: 'Consolas', monospace;
                padding: 0 10px;  /* –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã */
                background-color: #252526;
                border-radius: 4px;
                border: 1px solid #3d3d3d;
                min-height: %s;  /* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ */
                max-height: %s;  /* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ */
                line-height: %s;  /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ */
            }
        """ % (button_height, button_height, button_height))
        
        self.copy_btn = QPushButton()
        self.copy_btn.setToolTip("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å")
        self.copy_btn.setFixedSize(32, 32)
        self.copy_btn.setIcon(QIcon(resource_path("icon-copy.png")))
        self.copy_btn.setIconSize(QSize(18, 18))
        self.copy_btn.setStyleSheet("""
            QPushButton {
                background-color: #2d2d2d;
                border: 1px solid #3d3d3d;
                border-radius: 4px;
                padding: 6px;
            }
            QPushButton:hover {
                background-color: #3d3d3d;
                border: 1px solid #4d4d4d;
            }
            QPushButton:pressed {
                background-color: #1e1e1e;
                padding: 7px 5px 5px 7px;
            }
        """)
        
        address_layout.addWidget(self.mail_label)
        address_layout.addWidget(self.mail_address, 1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        address_layout.addWidget(self.copy_btn)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_container = QWidget()
        button_layout = QHBoxLayout(button_container)
        button_layout.setContentsMargins(0, 0, 0, 0)
        button_layout.setSpacing(8)
        
        self.new_mail_btn = QPushButton("–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å")
        self.refresh_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        
        for btn in [self.new_mail_btn, self.refresh_btn]:
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #2d2d2d;
                    color: #ffffff;
                    border: 1px solid #3d3d3d;
                    padding: 6px 12px;
                    border-radius: 4px;
                    font-size: 12px;
                    min-width: 90px;
                }
                QPushButton:hover {
                    background-color: #3d3d3d;
                    border: 1px solid #4d4d4d;
                }
                QPushButton:pressed {
                    background-color: #1e1e1e;
                }
            """)
        
        button_layout.addWidget(self.new_mail_btn)
        button_layout.addWidget(self.refresh_btn)
        
        about_btn = QPushButton()
        about_btn.setToolTip("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_btn.setFixedSize(32, 32)
        about_btn.setIcon(QIcon(resource_path("suicon.png")))
        about_btn.setIconSize(QSize(18, 18))
        about_btn.setStyleSheet("""
            QPushButton {
                background-color: #2d2d2d;
                border: 1px solid #3d3d3d;
                border-radius: 4px;
                padding: 6px;
            }
            QPushButton:hover {
                background-color: #3d3d3d;
                border: 1px solid #4d4d4d;
            }
            QPushButton:pressed {
                background-color: #1e1e1e;
                padding: 7px 5px 5px 7px;
            }
        """)
        about_btn.clicked.connect(self.show_about)
        button_layout.addWidget(about_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
        top_panel.addWidget(address_container, 7)
        top_panel.addWidget(button_container, 3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addWidget(top_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∏—Å–µ–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        main_container = QWidget()
        main_layout = QVBoxLayout(main_container)
        main_layout.setContentsMargins(0, 0, 0, 0)
        
        # –°–ø–ª–∏—Ç—Ç–µ—Ä –∏ —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
        splitter = QSplitter(Qt.Orientation.Horizontal)
        splitter.setStyleSheet("""
            QSplitter::handle {
                width: 1px;  /* –¢–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è */
                background-color: #3d3d3d;  /* –¶–≤–µ—Ç –ª–∏–Ω–∏–∏ */
            }
        """)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∏—Å—å–º–∞–º–∏
        mail_container = QWidget()
        mail_container.setStyleSheet("""
            QWidget {
                background-color: transparent;  /* –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
                border: none;  /* –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É */
            }
        """)
        mail_layout = QVBoxLayout(mail_container)
        mail_layout.setContentsMargins(0, 0, 0, 0)
        mail_layout.setSpacing(10)
        
        mail_header = QLabel("üì• –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        mail_header.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #ffffff;
                padding: 5px 0;
            }
        """)
        
        self.mail_list = QListWidget()
        self.mail_list.setFixedWidth(350)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        
        mail_layout.addWidget(mail_header)
        mail_layout.addWidget(self.mail_list)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –ø–∏—Å—å–º–∞
        view_container = QWidget()
        view_container.setStyleSheet("""
            QWidget {
                background-color: #252526;
                border-radius: 4px;
                padding: 10px;
            }
        """)
        view_layout = QVBoxLayout(view_container)
        view_layout.setContentsMargins(0, 0, 0, 0)
        
        self.web_view = QWebEngineView()
        self.web_view.setMinimumWidth(500)
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–µ–±-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.web_view.setHtml(self.welcome_html, QUrl())
        
        view_layout.addWidget(self.web_view)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(mail_container)
        splitter.addWidget(view_container)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        splitter.setCollapsible(0, False)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å
        splitter.setCollapsible(1, False)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
        splitter.handle(1).setEnabled(False)  # –û—Ç–∫–ª—é—á–∞–µ–º handle —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞ (30% : 70%)
        splitter.setSizes([300, 700])
        
        main_layout.addWidget(splitter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ –≥–ª–∞–≤–Ω—ã–π layout
        layout.addWidget(main_container, stretch=1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.new_mail_btn.clicked.connect(self.create_new_mail)
        self.refresh_btn.clicked.connect(self.check_mail)
        self.mail_list.itemClicked.connect(self.show_message)
        self.copy_btn.clicked.connect(self.copy_address_to_clipboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è mail_list –∏ web_view
        self.mail_list.setMinimumWidth(300)
        self.mail_list.setMaximumWidth(500)
        self.web_view.setMinimumWidth(400)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.setChildrenCollapsible(False)
        splitter.setCollapsible(0, False)
        splitter.setCollapsible(1, False)
        splitter.handle(1).setEnabled(True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 2)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (30% : 70%)
        total_width = self.width()
        splitter.setSizes([int(total_width * 0.3), int(total_width * 0.7)])

    def show_about(self):
        about_html = '''
            <html>
            <body style="
                background-color: #1e1e1e;
                color: #ffffff;
                font-family: 'Segoe UI', Arial, sans-serif;
                margin: 0;
                padding: 20px;
            ">
                <div style="
                    background-color: #252526;
                    border-radius: 6px;  /* –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ */
                    padding: 25px;
                    text-align: center;
                    border: 1px solid #3d3d3d;
                ">
                    <h2 style="margin-top: 0; color: #ffffff;">–û –ø—Ä–æ–≥—Ä–∞–º–º–µ</h2>
                    <p style="color: #e0e0e0; line-height: 1.6;">
                        –í—Ä–µ–º–µ–Ω–Ω–∞—è –ü–æ—á—Ç–∞ - —ç—Ç–æ —É–¥–æ–±–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö email-–∞–¥—Ä–µ—Å–æ–≤.
                        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ—á—Ç—É –æ—Ç —Å–ø–∞–º–∞ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.
                    </p>
                    <div style="margin: 25px 0;">
                        <h3 style="color: #ffffff;">–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h3>
                        <ul style="
                            text-align: left;
                            color: #e0e0e0;
                            line-height: 1.6;
                            list-style-type: none;
                            padding: 0;
                        ">
                            <li>‚úì –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞</li>
                            <li>‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º</li>
                            <li>‚úì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</li>
                            <li>‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∏—Å–µ–º –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ</li>
                        </ul>
                    </div>
                    <div style="
                        background-color: #2d2d2d;
                        border-radius: 8px;
                        padding: 20px;
                        margin-top: 20px;
                        border: 1px solid #3d3d3d;
                    ">
                        <p style="margin: 0 0 15px 0; color: #e0e0e0;">
                            –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?<br>
                            –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:
                        </p>
                        <a href="https://t.me/elijah_5456" style="
                            display: inline-block;
                            background-color: #0088cc;
                            color: white;
                            text-decoration: none;
                            padding: 10px 20px;
                            border-radius: 5px;
                            font-weight: 500;
                        ">
                            Telegram
                        </a>
                    </div>
                </div>
            </body>
            </html>
        '''
        
        dialog = QDialog(self)
        dialog.setWindowTitle("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        dialog.setFixedSize(400, 500)
        
        layout = QVBoxLayout(dialog)
        layout.setContentsMargins(0, 0, 0, 0)
        
        web_view = QWebEngineView()
        web_view.setHtml(about_html)
        
        layout.addWidget(web_view)
        dialog.exec()

    async def init_session(self):
        try:
            if self.session is None or self.session.closed:
                self.session = aiohttp.ClientSession()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            self.session = aiohttp.ClientSession()

    def load_settings(self):
        try:
            self.settings_path.mkdir(parents=True, exist_ok=True)
            if self.settings_file.exists():
                with open(self.settings_file, 'r') as f:
                    settings = json.load(f)
                    loaded_mail = settings.get('current_mail', '')
                    if loaded_mail:
                        self.current_mail = loaded_mail
                        self.mail_address.setText(self.current_mail)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ—á—Ç—ã
                        mail_folder = self.mail_folder / self.current_mail
                        if not mail_folder.exists():
                            mail_folder.mkdir(parents=True, exist_ok=True)
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
                        self.load_saved_messages()
                    else:
                        # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        self.create_new_mail()
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
                self.create_new_mail()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
            self.create_new_mail()

    def save_settings(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = self.settings_file.with_suffix('.tmp')
            settings = {
                'current_mail': self.current_mail
            }
            
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(temp_file, 'w') as f:
                json.dump(settings, f)
                
            # –ó–∞—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            if temp_file.exists():
                temp_file.replace(self.settings_file)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
            if self.settings_file.exists():
                self.load_settings()

    def create_new_mail(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
            msg_box.setText('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å?\n\n–í–Ω–∏–º–∞–Ω–∏–µ: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')
            msg_box.setIcon(QMessageBox.Icon.Question)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            yes_button = msg_box.addButton('–î–∞', QMessageBox.ButtonRole.YesRole)
            no_button = msg_box.addButton('–ù–µ—Ç', QMessageBox.ButtonRole.NoRole)
            msg_box.setDefaultButton(no_button)  # –ù–µ—Ç - –∫–Ω–æ–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            msg_box.exec()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
            if msg_box.clickedButton() == yes_button:
                url = f'{API}?action=genRandomMailbox&count=1'
                response = requests.get(url)
                
                if response.status_code == 200:
                    email = response.json()
                    if email and isinstance(email, list) and len(email) > 0:
                        new_mail = email[0]
                        
                        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if self.current_mail:
                            old_folder = self.mail_folder / self.current_mail
                            if old_folder.exists():
                                shutil.rmtree(old_folder)
                                print(f"–£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å—Ç–∞—Ä–æ–π –ø–æ—á—Ç—ã: {self.current_mail}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
                        self.current_mail = new_mail
                        self.save_settings()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        self.update_mail_address(self.current_mail)
                        self.clear_mail_list()
                        self.clear_web_view()
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
                        self.web_view.setHtml(self.welcome_html, QUrl())
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
                        new_folder = self.mail_folder / new_mail
                        new_folder.mkdir(parents=True, exist_ok=True)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã
                        self.check_mail()
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                        success_box = QMessageBox(self)
                        success_box.setWindowTitle('–£—Å–ø–µ—Ö')
                        success_box.setText(f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å: {new_mail}')
                        success_box.setIcon(QMessageBox.Icon.Information)
                        success_box.addButton('–û–ö', QMessageBox.ButtonRole.AcceptRole)
                        success_box.exec()
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {e}")
            error_box = QMessageBox(self)
            error_box.setWindowTitle('–û—à–∏–±–∫–∞')
            error_box.setText(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å: {str(e)}')
            error_box.setIcon(QMessageBox.Icon.Critical)
            error_box.addButton('–û–ö', QMessageBox.ButtonRole.AcceptRole)
            error_box.exec()
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å
            self.load_settings()

    async def _check_mail_async(self):
        try:
            if not self.current_mail:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
            existing_messages = set()
            for index in range(self.mail_list.count()):
                item = self.mail_list.item(index)
                msg_id = item.data(Qt.ItemDataRole.UserRole)
                existing_messages.add(msg_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
            login, domain = self.current_mail.split("@")
            url = f'{API}?action=getMessages&login={login}&domain={domain}'
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        messages = await response.json()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
                        new_messages = []
                        for msg in messages:
                            if msg['id'] not in existing_messages:
                                new_messages.append(msg)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
                        if new_messages and self.last_message_count > 0:
                            self.show_notification(len(new_messages))
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if new_messages:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                            current_row = self.mail_list.currentRow()
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                            for msg in reversed(new_messages):
                                date = msg.get('date', '').split(' ')[0]
                                subject = msg.get('subject', '(–ë–µ–∑ —Ç–µ–º—ã)')
                                sender = msg.get('from', 'Unknown')
                                
                                if len(subject) > 30:
                                    subject = subject[:30] + "..."
                                if len(sender) > 30:
                                    sender = sender[:30] + "..."
                                
                                item_text = f"–û—Ç: {sender}\n–¢–µ–º–∞: {subject}\n–î–∞—Ç–∞: {date}"
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                                item = QListWidgetItem(item_text)
                                item.setData(Qt.ItemDataRole.UserRole, msg['id'])
                                self.mail_list.insertItem(0, item)
                            
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                            if current_row >= 0:
                                self.mail_list.setCurrentRow(current_row + len(new_messages))
                        
                        self.last_message_count = len(messages)
                        
            QApplication.processEvents()
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")

    def auto_check_mail(self):
        asyncio.run_coroutine_threadsafe(self._check_mail_async(), self.async_helper.loop)

    def show_notification(self, count: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö"""
        try:
            if self.is_windows:
                title = "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ü–æ—á—Ç–∞"
                msg = f"–ü–æ–ª—É—á–µ–Ω–æ {count} –Ω–æ–≤—ã—Ö {'–ø–∏—Å—å–º–æ' if count == 1 else '–ø–∏—Å—å–º–∞' if 1 < count < 5 else '–ø–∏—Å–µ–º'}"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º PNG —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ ICO
                icon_path = os.path.abspath("appicon.png")
                
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                toast = Notification(
                    app_id="–í—Ä–µ–º–µ–Ω–Ω–∞—è –ü–æ—á—Ç–∞",
                    title=title,
                    msg=msg,
                    icon=icon_path,
                    duration="short"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                toast.set_audio(audio.Mail, loop=False)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                toast.show()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def check_mail(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã"""
        self.auto_check_mail()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    def add_mail_item(self, text, msg_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
        item = QListWidgetItem(text)
        item.setData(Qt.ItemDataRole.UserRole, msg_id)
        self.mail_list.addItem(item)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if self.mail_list.count() == 1:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–∏—Å—å–º–æ
            threading.Thread(target=lambda: self.preload_message(msg_id), daemon=True).start()

    def show_message(self, item):
        if not item:
            return
            
        try:
            msg_id = item.data(Qt.ItemDataRole.UserRole)
            
            self.web_view.setHtml("")
            QApplication.processEvents()

            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if isinstance(msg_id, int):  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
                msg_data = self.get_message_from_server(msg_id)
                if msg_data:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    filename = self.save_message(msg_data)
                    if filename:
                        msg_id = filename  # –¢–µ–ø–µ—Ä—å –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            
            # –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
            if isinstance(msg_id, str):  # –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                msg_data = self.read_local_message(msg_id)
                if not msg_data:
                    return

            html_content = msg_data.get('htmlBody', '')
            text_content = msg_data.get('textBody', '')
            
            email_info = f'''
                <div style="
                    background: #f5f5f5;
                    padding: 15px 20px;
                    margin-bottom: 20px;
                    border-radius: 4px;
                ">
                    <p style="margin: 5px 0;"><b>–û—Ç:</b> {msg_data.get('from', 'Unknown')}</p>
                    <p style="margin: 5px 0;"><b>–¢–µ–º–∞:</b> {msg_data.get('subject', '(–ë–µ–∑ —Ç–µ–º—ã)')}</p>
                    <p style="margin: 5px 0;"><b>–î–∞—Ç–∞:</b> {msg_data.get('date', '')}</p>
                </div>
            '''

            if html_content:
                base_html = f'''
                    <html>
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <style>
                            body {{
                                margin: 0;
                                padding: 20px;
                                background: #fff;
                            }}
                            .email-info {{
                                font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                            }}
                            .email-content {{
                                img {{
                                    max-width: 100%;
                                    height: auto;
                                }}
                            }}
                        </style>
                    </head>
                    <body>
                        <div class="email-info">{email_info}</div>
                        <div class="email-content">{html_content}</div>
                    </body>
                    </html>
                '''
            else:
                base_html = f'''
                    <html>
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500&display=swap" rel="stylesheet">
                        <style>
                            body {{
                                margin: 0;
                                padding: 20px 40px;
                                background: #fff;
                                font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                                font-size: 16px;
                                line-height: 1.7;
                                color: #2c353d;
                                max-width: 800px;
                                margin: 0 auto;
                            }}
                            .text-content {{
                                letter-spacing: -0.003em;
                                font-weight: 400;
                            }}
                            .text-content p {{
                                margin: 1.2em 0;
                            }}
                            .text-content a {{
                                color: #0066cc;
                                text-decoration: none;
                            }}
                            .text-content a:hover {{
                                text-decoration: underline;
                            }}
                        </style>
                    </head>
                    <body>
                        {email_info}
                        <div class="text-content">{text_content.replace(chr(10), '<br>')}</div>
                    </body>
                    </html>
                '''

            settings = self.web_view.settings()
            settings.setAttribute(QWebEngineSettings.WebAttribute.LocalContentCanAccessRemoteUrls, True)
            settings.setAttribute(QWebEngineSettings.WebAttribute.AllowRunningInsecureContent, True)
            
            base_url = QUrl.fromLocalFile(os.path.abspath("."))
            self.web_view.setHtml(base_html, base_url)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.web_view.setHtml(f'<div style="color:red">–û—à–∏–±–∫–∞: {str(e)}</div>')

    def get_message_from_server(self, msg_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            future = asyncio.run_coroutine_threadsafe(
                self._read_message_async(msg_id), 
                self.async_helper.loop
            )
            return future.result()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None

    def read_local_message(self, filename: str) -> dict:
        """–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            mail_folder = self.mail_folder / self.current_mail
            file_path = mail_folder / f"{filename}.html"
            if file_path.exists():
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    try:
                        date_str = filename.split('_')[0]
                        date = datetime.strptime(date_str, '%Y%m%d%H%M%S').strftime('%Y-%m-%d %H:%M:%S')
                    except:
                        date = datetime.fromtimestamp(file_path.stat().st_mtime).strftime('%Y-%m-%d %H:%M:%S')
                    
                    return {
                        'from': self.current_mail,
                        'subject': ' '.join(filename.split('_')[1:]),
                        'date': date,
                        'htmlBody': content
                    }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None

    def save_message(self, msg_data: dict) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        try:
            if not self.current_mail or not msg_data:
                return None

            mail_folder = self.mail_folder / self.current_mail
            mail_folder.mkdir(parents=True, exist_ok=True)

            try:
                date_str = datetime.strptime(msg_data.get('date', ''), '%Y-%m-%d %H:%M:%S').strftime('%Y%m%d%H%M%S')
            except ValueError:
                date_str = datetime.now().strftime('%Y%m%d%H%M%S')

            subject = msg_data.get('subject', 'no_subject')
            subject = "".join(c for c in subject if c.isalnum() or c in (' ', '-', '_'))[:50]
            filename = f"{date_str}_{subject}"
            
            file_path = mail_folder / f"{filename}.html"

            html_content = msg_data.get('htmlBody', '')
            text_content = msg_data.get('textBody', '')
            
            content = html_content if html_content else f'<pre style="white-space:pre-wrap">{text_content}</pre>'
            
            full_html = f'''
            <html>
            <head>
                <meta charset="UTF-8">
            </head>
            <body>
                {content}
            </body>
            </html>
            '''

            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(full_html)

            return filename

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Å—å–º–∞: {e}")
            return None

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    def preload_message(self, msg_id):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if msg_id not in self.message_cache:
                if isinstance(msg_id, int):
                    msg_data = self.get_message_from_server(msg_id)
                else:
                    msg_data = self.read_local_message(msg_id)
                
                if msg_data:
                    self.message_cache[msg_id] = msg_data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def setup_web_engine(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–µ–±-–¥–≤–∏–∂–∫–∞"""
        profile = QWebEngineProfile.defaultProfile()
        settings = profile.settings()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        settings.setAttribute(QWebEngineSettings.WebAttribute.LocalContentCanAccessRemoteUrls, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.AllowRunningInsecureContent, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.AutoLoadImages, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.WebGLEnabled, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptEnabled, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.LocalContentCanAccessFileUrls, True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        profile.setHttpCacheType(QWebEngineProfile.HttpCacheType.DiskHttpCache)
        profile.setPersistentCookiesPolicy(QWebEngineProfile.PersistentCookiesPolicy.AllowPersistentCookies)
        profile.setCachePath(str(Path.home() / "AppData" / "Local" / "TempMail" / "cache"))
        profile.setPersistentStoragePath(str(Path.home() / "AppData" / "Local" / "TempMail" / "storage"))

    def closeEvent(self, event):
        try:
            self.save_settings()
            self.check_timer.stop()
            if hasattr(self, 'toaster') and self.toaster:
                self.toaster = None  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if self.session and not self.session.closed:
                self.async_helper.run_async(self.session.close())
            event.accept()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            event.accept()

    def copy_address_to_clipboard(self):
        if self.current_mail:
            clipboard = QApplication.clipboard()
            clipboard.setText(self.current_mail)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            QToolTip.showText(
                self.copy_btn.mapToGlobal(QPoint(0, self.copy_btn.height())),
                "–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!",
                self.copy_btn,
                QRect(),
                2000
            )

    async def create_mailbox(self, username: str, domain: str) -> bool:
        await self.init_session()
        url = f'{API}?action=genRandomMailbox&count=1'
        try:
            async with self.session.get(url) as response:
                if response.status == 200:
                    return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞: {e}")
        return False

    def update_mail_address(self, address):
        self.mail_address.setText(address)

    def clear_mail_list(self):
        self.mail_list.clear()

    def clear_web_view(self):
        self.web_view.setHtml(self.welcome_html, QUrl())

    async def safe_request(self, coro):
        try:
            return await coro
        except aiohttp.ClientError as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            return None
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None

    async def _read_message_async(self, msg_id: int) -> dict:
        try:
            if not self.current_mail:
                return {}
            
            login, domain = self.current_mail.split("@")
            url = f'{API}?action=readMessage&login={login}&domain={domain}&id={msg_id}'
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
            return {}
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {}

    def load_saved_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∏–∑ –ø–∞–ø–∫–∏"""
        try:
            if not self.current_mail:
                return
            
            mail_folder = self.mail_folder / self.current_mail
            if not mail_folder.exists():
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .html —Ñ–∞–π–ª–æ–≤
            saved_messages = list(mail_folder.glob('*.html'))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            saved_messages.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            for msg_path in saved_messages:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    msg_id = msg_path.stem
                    
                    # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    msg_data = self.read_local_message(msg_id)
                    if msg_data:
                        date = msg_data.get('date', '')
                        subject = msg_data.get('subject', '(–ë–µ–∑ —Ç–µ–º—ã)')
                        sender = msg_data.get('from', 'Unknown')
                        
                        if len(subject) > 30:
                            subject = subject[:30] + "..."
                        if len(sender) > 30:
                            sender = sender[:30] + "..."
                        
                        item_text = f"–û—Ç: {sender}\n–¢–µ–º–∞: {subject}\n–î–∞—Ç–∞: {date}"
                        
                        item = QListWidgetItem(item_text)
                        item.setData(Qt.ItemDataRole.UserRole, msg_id)
                        self.mail_list.addItem(item)
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_path}: {e}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {e}")

def main():
    app = QApplication(sys.argv)
    window = TempMailApp()
    window.show()
    sys.exit(app.exec())

if __name__ == '__main__':
    main()